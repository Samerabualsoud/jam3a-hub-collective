// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ubqnetocrsksadsbdhlz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVicW5ldG9jcnNrc2Fkc2JkaGx6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMjYzMTUsImV4cCI6MjA2MDYwMjMxNX0.pq9DQRwVs2ycK6AnNceXEHYsqy229dM1T8I0qBc1wNE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

async getProductsByCategorySlug(slug: string) {
  try {
    console.log(`Fetching products for category slug: ${slug}`);
    
    // First get the category ID
    const { data: categoryData, error: categoryError } = await this.supabase
      .from('product_categories')
      .select('id')
      .eq('slug', slug)
      .single();
      
    if (categoryError) {
      console.error('Error fetching category:', categoryError);
      throw new Error(`Category not found: ${slug}`);
    }
    
    if (!categoryData) {
      console.log('No category found for slug:', slug);
      return [];
    }
    
    console.log(`Found category ID: ${categoryData.id}`);
    
    // Get products for this category
    const { data: products, error: productsError } = await this.supabase
      .from('products_catalog')
      .select(`
        *,
        discounts:product_discounts(*)
      `)
      .eq('category_id', categoryData.id);
      
    if (productsError) {
      console.error('Error fetching products:', productsError);
      throw productsError;
    }
    
    console.log(`Fetched ${products?.length || 0} products`);
    
    // Process products to include discounts
    return products.map(product => {
      // Map discounts array from the joined table
      const discounts = product.discounts?.map(d => ({
        minCount: d.min_count,
        price: d.price,
        savings: d.savings
      })) || [];
      
      return {
        ...product,
        discounts
      };
    });
  } catch (error) {
    console.error('Error in getProductsByCategorySlug:', error);
    throw error;
  }
},


// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../../integrations/supabase/types';

const SUPABASE_URL = "https://ubqnetocrsksadsbdhlz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVicW5ldG9jcnNrc2Fkc2JkaGx6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMjYzMTUsImV4cCI6MjA2MDYwMjMxNX0.pq9DQRwVs2ycK6AnNceXEHYsqy229dM1T8I0qBc1wNE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create a class to handle Supabase API operations
export class SupabaseApi {
  supabase = supabase;
  
  // Product Category Methods
  async getProductsByCategorySlug(slug: string) {
    try {
      console.log(`Fetching products for category slug: ${slug}`);
      
      // First get the category ID
      const { data: categoryData, error: categoryError } = await this.supabase
        .from('product_categories')
        .select('id')
        .eq('slug', slug)
        .single();
        
      if (categoryError) {
        console.error('Error fetching category:', categoryError);
        throw new Error(`Category not found: ${slug}`);
      }
      
      if (!categoryData) {
        console.log('No category found for slug:', slug);
        return [];
      }
      
      console.log(`Found category ID: ${categoryData.id}`);
      
      // Get products for this category
      const { data: products, error: productsError } = await this.supabase
        .from('products_catalog')
        .select(`
          *,
          discounts:product_discounts(*)
        `)
        .eq('category_id', categoryData.id);
        
      if (productsError) {
        console.error('Error fetching products:', productsError);
        throw productsError;
      }
      
      console.log(`Fetched ${products?.length || 0} products`);
      
      // Process products to include discounts
      return products.map(product => {
        // Map discounts array from the joined table
        const discounts = product.discounts?.map(d => ({
          minCount: d.min_count,
          price: d.price,
          savings: d.savings
        })) || [];
        
        return {
          ...product,
          discounts
        };
      });
    } catch (error) {
      console.error('Error in getProductsByCategorySlug:', error);
      throw error;
    }
  }
  
  // Products Methods
  async getProducts() {
    try {
      const { data, error } = await this.supabase
        .from('products_catalog')
        .select('*')
        .order('created_at', { ascending: false });
        
      if (error) {
        console.error('Error fetching products:', error);
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error('Error in getProducts:', error);
      throw error;
    }
  }
  
  async createProduct(productData: any) {
    try {
      const { data, error } = await this.supabase
        .from('products_catalog')
        .insert([productData])
        .select()
        .single();
        
      if (error) {
        console.error('Error creating product:', error);
        throw error;
      }
      
      return data;
    } catch (error) {
      console.error('Error in createProduct:', error);
      throw error;
    }
  }
  
  async updateProduct(id: string | number, productData: any) {
    try {
      const { data, error } = await this.supabase
        .from('products_catalog')
        .update(productData)
        .eq('id', id)
        .select()
        .single();
        
      if (error) {
        console.error('Error updating product:', error);
        throw error;
      }
      
      return data;
    } catch (error) {
      console.error('Error in updateProduct:', error);
      throw error;
    }
  }
  
  async deleteProduct(id: string | number) {
    try {
      const { error } = await this.supabase
        .from('products_catalog')
        .delete()
        .eq('id', id);
        
      if (error) {
        console.error('Error deleting product:', error);
        throw error;
      }
      
      return true;
    } catch (error) {
      console.error('Error in deleteProduct:', error);
      throw error;
    }
  }
  
  async createMultipleProducts(products: any[]) {
    try {
      const { data, error } = await this.supabase
        .from('products_catalog')
        .insert(products)
        .select();
        
      if (error) {
        console.error('Error creating multiple products:', error);
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error('Error in createMultipleProducts:', error);
      throw error;
    }
  }
  
  // Deals Methods
  async getDeals() {
    try {
      const { data, error } = await this.supabase
        .from('deals')
        .select('*')
        .order('created_at', { ascending: false });
        
      if (error) {
        console.error('Error fetching deals:', error);
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error('Error in getDeals:', error);
      throw error;
    }
  }
  
  async createDeal(dealData: any) {
    try {
      const { data, error } = await this.supabase
        .from('deals')
        .insert([dealData])
        .select()
        .single();
        
      if (error) {
        console.error('Error creating deal:', error);
        throw error;
      }
      
      return data;
    } catch (error) {
      console.error('Error in createDeal:', error);
      throw error;
    }
  }
  
  async updateDeal(id: string | number, dealData: any) {
    try {
      const { data, error } = await this.supabase
        .from('deals')
        .update(dealData)
        .eq('id', id)
        .select()
        .single();
        
      if (error) {
        console.error('Error updating deal:', error);
        throw error;
      }
      
      return data;
    } catch (error) {
      console.error('Error in updateDeal:', error);
      throw error;
    }
  }
  
  async deleteDeal(id: string | number) {
    try {
      const { error } = await this.supabase
        .from('deals')
        .delete()
        .eq('id', id);
        
      if (error) {
        console.error('Error deleting deal:', error);
        throw error;
      }
      
      return true;
    } catch (error) {
      console.error('Error in deleteDeal:', error);
      throw error;
    }
  }
  
  // Orders Methods
  async getOrders() {
    try {
      const { data, error } = await this.supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });
        
      if (error) {
        console.error('Error fetching orders:', error);
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error('Error in getOrders:', error);
      throw error;
    }
  }

  // Add any other methods required by the application here
}

// Create a hook for using the Supabase API
export const useSupabaseApi = () => {
  return new SupabaseApi();
};
